@using Microsoft.AspNetCore.Http
@using SimpleFeed.Core.FeedEntries
@using SimpleFeed.Core.User
@using SimpleFeed.HtmlHelpers
@model SimpleFeed.Data.OperationResults.ModelWithCreator<SimpleFeed.Core.FeedEntries.Base.FeedEntryBase>
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<div class="feed-entry">
    <div class="feed-entry-createdby">
        <div class="feed-entry-author">
            <img src="/images/user_default.png" /> @Model.Creator.UserName
        </div>
        <time class="timeago" datetime="@Model.Model.CreationDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)">
            @Model.Model.CreationDate.ToString("d")
        </time>
    </div>

    @Html.FeedEntryPartialFor(Model.Model)

    <div class="feed-entry-title">
        <div class="feed-entry-votes-wrapper">
            @using (Html.BeginForm("MakeVoteForFeedEntry", "Vote", new { votedEntryId = @Model.Model.Id, isUpvote = true },
                FormMethod.Post, true, new { id = $"upvote-{ Model.Model.Id }" }))
            {
                <div class="vote-img-wrapper">
                    <button type="submit">
                        <img src="/images/icons/ico-upvote.png">
                    </button>
                </div>
            }
            <div id="votescount-@Model.Model.Id" class="feed-entry-votescount">
                <span>@Model.Model.VotesBalance</span>
            </div>
            @using (Html.BeginForm("MakeVoteForFeedEntry", "Vote", new { votedEntryId = @Model.Model.Id, isUpvote = false },
                FormMethod.Post, true, new { id = $"downvote-{Model.Model.Id}" }))
            {
                <div class="vote-img-wrapper">
                    <button type="submit">
                        <img src="/images/icons/ico-downvote.png">
                    </button>
                </div>
            }
        </div>
        <a href="@Url.Action("GetEntry", new {entryId = Model.Model.Id})">@Model.Model.Title</a>
    </div>
    @if (Model.Model is UploadedImageFeedEntry)
    {
        <div class="feed-entry-type">
            <img src="~/images/icons/ico-uploaded_image.png" />
            <span>Uploaded image</span>
        </div>
    }
    else if (Model.Model is ExternalLinkFeedEntry)
    {
        <div class="feed-entry-type">
            <img src="~/images/icons/ico-external_link.png" />
            <span>External link</span>
        </div>
    }
    

    @if (SignInManager.IsSignedIn(User) && Model.Creator.Id.Equals(UserManager.GetUserAsync(User).Result.Id))
    {
        <div class="feed-entry-author-bar">
            @Html.ActionLink("Delete", "DeleteFeedEntry", new { entryId = Model.Model.Id }, new { Class = "right" })
            @Html.ActionLink("Update", "EditFeedEntry", new { entryId = Model.Model.Id }, new { Class = "right" })
        </div>
    }

    <div class="feed-entry-desc">
        @Model.Model.Description
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded",
        function() {
            wireSubmitVote("@Model.Model.Id.ToString()", true);
            wireSubmitVote("@Model.Model.Id.ToString()", false);
            $("time.timeago").timeago();
        });
</script>
